security:
  role_hierarchy:
    ROLE_ADMIN: ROLE_SUPERVISOR
    ROLE_SUPERVISOR: ROLE_WORKER
    ROLE_WORKER: ROLE_USER

  # Definition for user providers
  providers:
    db:
      entity:
        class: Storage\Doctrine\Main\Entity\User
        property: email

  # Encoders we can use for specific entities (i.e., for user password)
  encoders:
    Storage\Doctrine\Main\Entity\User:
      algorithm: bcrypt

  # What is available publicly and how to check users
  firewalls:
    dev:
      pattern: ^/(_(profiler|wdt)|css|images|js)/
      security: false

    login:
      pattern:  ^/api/login
      stateless: true
      anonymous: true
      json_login:
        check_path: /api/login
        success_handler: lexik_jwt_authentication.handler.authentication_success
        failure_handler: lexik_jwt_authentication.handler.authentication_failure

#    api:
#      pattern: ^/api
#      stateless: true
#      guard:
#        authenticators:
#          - lexik_jwt_authentication.jwt_token_authenticator

    main:
      anonymous: ~
      provider: db
      logout:
        path: userIdentity.logout
        target: /login

      form_login:
        login_path: userIdentity.login
        check_path: userIdentity.login
        username_parameter: email
        password_parameter: password
        default_target_path: /

      remember_me:
        secret: "%kernel.secret%"
        lifetime: 604800 # 1 week in seconds
        path: /
        # by default, the feature is enabled by checking a
        # checkbox in the login form (see below), uncomment the
        # following line to always enable it.
        always_remember_me: true

  # Enable access to different parts of the system
  # Note: Only the *first* access control that matches will be used
  access_control:
#    - { path: ^/login$, roles: IS_AUTHENTICATED_ANONYMOUSLY }
#    - { path: ^/api/login, roles: IS_AUTHENTICATED_ANONYMOUSLY }
#    - { path: ^/api, roles: IS_AUTHENTICATED_FULLY }
